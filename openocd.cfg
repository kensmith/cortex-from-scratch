set CCLK 4000

source [find interface/olimex-arm-usb-ocd.cfg]
source [find target/lpc1766.cfg]
puts [format "_TARGETNAME = %s" $_TARGETNAME]

adapter_khz 333

proc write_addr {addr value} {
    echo "write_addr: [format 0x%x $addr], [format 0x%x $value]"
    set value_list [list value]
    array2mem value_list 32 $addr 1
}

proc fetch_addr {addr} {
    mem2array val 32 $addr 1
    echo "fetch_addr: $addr returning [format 0x%x $val(0)]"
    return $val(0)
}

proc fetch_addr_and_mask {addr mask} {
    puts "fetch_addr_and_mask: 0 mask = [format 0x%x $mask]"
    #mem2array present_val 32 $addr 1
    set present_val [fetch_addr $addr]
    echo "fetch_addr_and_mask: 1 present_val = [format 0x%x $present_val]"
    set present_val [expr $present_val & $mask]
    echo "fetch_addr_and_mask: 2 present_val = [format 0x%x $present_val]"
    #array2mem present_val 32 $addr 1
    write_addr $addr $present_val
}

proc fetch_addr_and_set {addr or_value} {
    set present_val [fetch_addr $addr]
    echo "fetch_addr_and_set: 1 present_val = [format 0x%x $present_val]"
    set present_val [expr $present_val | $or_value]
    echo "fetch_addr_and_set: 2 present_val = [format 0x%x $present_val]"
    write_addr $addr $present_val
}

proc feed_sequence { } {
    echo -n "feed_sequence: "
    set pll0feed 0x400fc08c

    mww $pll0feed 0xaa
    echo -n "0xaa "
    mww $pll0feed 0x55
    echo -n "0x55: "

    echo "done"
}

proc init_clock { } {
    echo " "
    echo " "
    echo "init_clock started"

    echo "using safest flash wait state configuration of 6"
    set flashcfg 0x400fc000
    mww $flashcfg [expr (5<<12) | 0x3a]

    echo "enabling the oscillator"
    set scs 0x400fc1a0
    echo "setting oscrange to 0"
    mww $scs [expr 0<<4]
    echo "setting oscen to 1"
    mww $scs [expr 1<<5]

    echo "checking that the oscillator is ready"
    while {([fetch_addr $scs] & (1<<6)) == 0} {
        mdw $flashcfg
        mdw $scs
        echo "waiting for main oscillator to be ready"
    }

    echo "disconnecting PLL0"
    set pll0con 0x400fc080
    fetch_addr_and_mask $pll0con [expr ~(1<<1)]
    feed_sequence

    echo "disabling PLL0"
    fetch_addr_and_mask $pll0con [expr ~(1<<0)]
    feed_sequence

    set clksrcsel 0x400fc10c
    echo "writing to clksrcsel"
    mww $clksrcsel 1
    echo "wrote to clksrcsel"

    echo "setting N and M in pll0cfg"
    set pll0cfg 0x400fc084
    mww $pll0cfg [expr ((25-1)<<0) | ((2-1)<<16)]
    feed_sequence
    echo "done setting pll0cfg"

    echo "enabling PLL0"
    mww $pll0con 1
    feed_sequence
    echo "pll0 enabled, wait for lock"
    set pll0stat 0x400fc088
    while {([fetch_addr $pll0stat] & (1<<26)) == 0} {
        echo "waiting for pll0 lock"
    }

    echo "setting MCLK at PLL0 / 3 = 300 / 3 = 100MHz"
    set cclkcfg 0x400fc104
    mww $cclkcfg [expr 3-1]
    echo "MCLK set"

    echo "setting peripheral clocks to 100 / 4 = 25Mhz"
    set pclksel0 0x400fc1a8
    set pclksel1 0x400fc1ac
    mww $pclksel0 0
    mww $pclksel1 0
    echo "set peripheral clocks"

    echo "connecting pll0"
    fetch_addr_and_set $pll0con [expr 1<<1]
    feed_sequence

    echo "using appropriate flash wait state configuration of 5"
    set flashcfg 0x400fc000
    mww $flashcfg [expr (4<<12) | 0x3a]

    set CCLK 100000

    echo "speeding up the jtag to match new CPU freq"
    adapter_khz 1000

    echo "init_clock finished"
    echo " "
    echo " "
}

#proc init_clock { } {
#    echo "starting PLL0 configuration"
#
#    set clksrcsel 0x400fc10c
#    set pll0con 0x400fc080
#    set pll0cfg 0x400fc084
#    set pll0stat 0x400fc088
#    set cclkcfg 0x400fc104
#    set scs 0x400fc1a0
#    set flashcfg 0x400fc000
#
#    set sysclk 96000000
#    set extclk 12000000
#    set pllclk 288000000
#    set pllmult [expr $pllclk / 2 / $extclk + 1]
#
#    adapter_khz 333
#
#    # lpc17xx_um.pdf, 4.5.13 PLL0 setup sequence
#    # 1. Disconnect PLL0 with one feed sequence if PLL0 is already connected.
#
#    echo "writing to flashcfg"
#    mww $flashcfg [expr (5<<12) | 0x3a]
#
#    echo "enabling the oscillator"
#    # oscen = 1, oscrange = 0
#    mww $scs [expr 0<<4]
#    mww $scs [expr 1<<5]
#
#    echo "checking that the oscillator is ready"
#    while {([fetch_addr $scs] & (1<<6)) == 0} {
#        mdw $flashcfg
#        mdw $scs
#        echo "waiting for main oscillator to be ready"
#    }
#
#    echo "disconnecting PLL0"
#    fetch_addr_and_mask $pll0con [expr ~(1<<1)]
#    feed_sequence
#
#    while {([fetch_addr $pll0stat] & (1<<25)) != 0} {
#        echo "waiting for PLL0 to disconnect"
#    }
#    echo "PLL0 disconnected"
#
#    # 2. Disable PLL0 with one feed sequence.
#    echo "disabling PLL0"
#    fetch_addr_and_mask $pll0con [expr ~(1<<0)]
#    feed_sequence
#
#    while {([fetch_addr $pll0stat] & (1<<24)) != 0} {
#        echo "waiting for PLL0 to shut down"
#    }
#    echo "PLL0 shut down"
#
#    # 3. Change the CPU Clock Divider setting to speed up operation without
#    #    PLL0, if desired.
#    # ks: not desired
#
#    # 4. Write to the Clock Source Selection Control register to change the
#    #    clock source if needed.
#    
#    echo "writing to clksrcsel"
#    mww $clksrcsel 1
#    echo "wrote to clksrcsel"
#
#    # 5. Write to the PLL0CFG and make it effective with one feed sequence. The
#    #    PLL0CFG can only be updated when PLL0 is disabled.  6. Enable PLL0 with
#    #    one feed sequence.
#
#    echo "pllmult = $pllmult"
#    mww $pll0cfg $pllmult
#    feed_sequence
#
#    # turn on the main PLL
#    fetch_addr_and_set $pll0con [expr 1<<0]
#    feed_sequence
#
#    while {([fetch_addr $pll0stat] & (1<<24)) == 0} {
#        echo "waiting for PLL0 to come up"
#    }
#
#    # 7. Change the CPU Clock Divider setting for the operation with PLL0. It
#    #    is critical to do this before connecting PLL0.
#
#    mww $cclkcfg 2
#
#
#    
#    # 8. Wait for PLL0 to achieve lock by monitoring the PLOCK0 bit in the
#    #    PLL0STAT register, or using the PLOCK0 interrupt, or wait for a fixed
#    #    time when the input clock to PLL0 is slow (i.e. 32 kHz). The value of
#    #    PLOCK0 may not be stable when the PLL reference frequency (FREF, the
#    #    frequency of REFCLK, which is equal to the PLL input frequency divided by
#    #    the pre-divider value) is less than 100 kHz or greater than 20 MHz. In
#    #    these cases, the PLL may be assumed to be stable after a start-up time
#    #    has passed. This time is 500 Î¼s when FREF is greater than 400 kHz and 200
#    #    / FREF seconds when FREF is less than 400 kHz.
#
#    while {($pll0stat & (1<<26)) == 0} {
#        echo "waiting for PLOCK0 to become 1"
#    }
#
#    # 9. Connect PLL0 with one feed sequence.
#
#    fetch_addr_and_set $pll0con [expr 1<<1]
#    feed_sequence
#
#    while {($pll0stat & (1<<25)) == 0} {
#        echo "waiting for PLL0 to connect"
#    }
#
#    set sysclk_khz [expr $sysclk / 1000]
#    echo "PLL0 configured for $sysclk_khz kHz"
#
#    set CCLK $sysclk_khz
#    echo "CCLK modified to match $CCLK"
#
#    # TODO set up flash latency and PLL
#
#    mww 0x400FC040 0x00
#    mdw 0x400FC040
#
#    mem2array config_reg 32 0x400fc040 1
#    foreach {name value} [set config_reg] {
#        puts "1: name: $name, value: $value"
#    }
#
#    #puts [format "reset init = %s" [mdw 0x400fc040]]
#    mww 0x400FC040 0x01
#    mdw 0x400FC040
#
#    mem2array config_reg 32 0x400fc040 1
#    foreach {name value} [set config_reg] {
#        puts "2: name: $name, value: $value"
#    }
#    puts "3: $config_reg(0)"
#    set config_reg(0) [expr $config_reg(0) | 0xf0]
#    puts "4: $config_reg(0)"
#    #adapter_khz 6000
#
#    mdw 0x400FC040
#    fetch_addr_and_mask 0x400fc040 0xf
#    mdw 0x400FC040
#
#    adapter_khz 6000
#}
#
#arm7_9 dcc_downloads enable
#gdb_memory_map disable
gdb_breakpoint_override hard
# TODO add an event handler to set the PLL on GDB attach
lpc1766.cpu configure -event reset-init {
    mww 0x400FC040 0x01
    #init_clock
}

lpc1766.cpu configure -event gdb-attach {
    # boot from user program instead of built-in boot loader
    mww 0x400FC040 0x01

    #init_clock
}
